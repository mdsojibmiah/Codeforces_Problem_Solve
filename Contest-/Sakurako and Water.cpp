#include <iostream>
#include <vector>
 
using namespace std;
 
int main() {
    int t;
    cin >> t; 
 
    while (t--) {
        int n;
        cin >> n; 
        vector<vector<int>> matrix(n, vector<int>(n));
 
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> matrix[i][j];
            }
        }
 
        int operations = 0;
 
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] < 0) {
                    
                    int needed = -matrix[i][j];
                    operations += needed;
 
                    
                    int k = 0;
                    while (i + k < n && j + k < n) {
                        matrix[i + k][j + k] += needed;
                        k++;
                    }
                }
            }
        }
 
        
        cout << operations << endl;
    }
 
    return 0;
}
â†’Judgement Protocol
Test: #1, time: 30 ms., memory: 36 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
4
1
1
2
-1 2
3 0
3
1 2 3
-2 1 -1
0 0 -1
5
1 1 -1 -1 3
-3 1 4 4 -4
-1 -1 3 0 -5
4 5 3 -3 -1
3 1 -3 -1 5
Output
0
1
4
19
Answer
0
1
4
19
Checker Log
ok 4 number(s): "0 1 4 19"
Test: #2, time: 15 ms., memory: 52 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
200
4
1 6 2 1
-5 -3 5 2
5 -5 1 0
-1 6 3 -1
4
-2 -2 -1 1
-2 -2 -1 2
-1 2 -1 0
-2 -2 -1 1
7
-4 -6 7 0 5 5 -6
-4 -6 -2 6 -2 1 2
-7 -5 -5 4 2 6 3
4 5 3 -3 -6 -3 -3
-3 -1 4 -3 0 3 -3
3 0 -5 -5 -6 3 -3
5 -5 2 4 -6 5 2
1
1
6
2 -2 -2 -2 -1 -1
2 -2 -1 0 1 0
2 -1 2 -1 1 0
0 2 1 -1 -1 -2
-1 0 2 -1 2 2
0 1 -2 0 -2 -2
7
-3 2 4 -1 0 4 -1
3 1 1 -1 3 -1 4
3 4 0 -2 0 -2 -4
1 -1 -1 3 -2 -4 -4
1 -1 -2 3 0 -1 1
-3 -1 4 2 1 4 0
-2 0 3 4 3 2 2
2
0 -1
2 -2
7
1 4 -3 2 -1 1 4
6 0 2 -6 -4 -1...
Output
9
11
50
0
15
28
3
47
16
39
6
12
4
19
4
4
22
31
8
46
54
4
0
5
29
13
42
3
17
22
42
7
1
15
3
9
44
25
4
3
21
29
8
7
33
12
10
19
31
33
12
41
15
5
5
10
20
9
17
19
12
9
33
0
10
16
6
1
0
0
2
54
7
10
18
12
7
8
1
39
0
3
8
1
28
20
6
20
40
7
15
27
17
1
33
1
16
36
39
29
36
38
9
66
5
3
9
6
31
12
7
54
4
32
4
8
3
5
6
13
7
24
5
8
1
24
7
17
5
1
15
8
18
5
18
1
0
4
0
4
24
5
11
32
3
5...
Answer
9
11
50
0
15
28
3
47
16
39
6
12
4
19
4
4
22
31
8
46
54
4
0
5
29
13
42
3
17
22
42
7
1
15
3
9
44
25
4
3
21
29
8
7
33
12
10
19
31
33
12
41
15
5
5
10
20
9
17
19
12
9
33
0
10
16
6
1
0
0
2
54
7
10
18
12
7
8
1
39
0
3
8
1
28
20
6
20
40
7
15
27
17
1
33
1
16
36
39
29
36
38
9
66
5
3
9
6
31
12
7
54
4
32
4
8
3
5
6
13
7
24
5
8
1
24
7
17
5
1
15
8
18
5
18
1
0
4
0
4
24
5
11
32
3
5...
Checker Log
ok 200 numbers
Test: #3, time: 671 ms., memory: 44 KB, exit code: 0, checker exit code: 0, verdict: OK
Input
2
500

Output
99900000
97468450
Answer
99900000
97468450
Checker Log
ok 2 number(s): "99900000 97468450"
close
